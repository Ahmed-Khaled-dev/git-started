in our previous encounter you created a repository which is a folder that is watched by GIT when you orderd git using the command "git init".
GIT is so special because the moment he is ordered to watch a folder he never slips and detects every change in the folder also GIT took
the term "Photographic memory" to the next level and never forgets versions (or checkpoints) of your work that it is ordered to memorize .

Now that you've created your first repository (which we will call "repo" from now), you'll start by writing your code.
Throughout each big step, you will need to keep track of your history.
Imagine this; you are working on a huge project with your team,
One of your team mates messed up a part of their code, they can't remember what part got messed up,
Neither can they go back to the code that worked fine, Scary to imagine right?

That's where "commits" come in hand.
"commits" are like checkpoints in games but for your code(or your work in general) made by GIT,
We will use the "git commit" command to order GIT to create a commit.
But first, let's write some code together!
In the "main.cpp" edit window, we need to write code using C++
For example, try writing: "int i = 5;" (-e)
Now you need to commit your changes to mark this checkpoint!
In the command line write: git commit (-c)
Congratulations! you have just written your first commit.
this is your git graph, it is a diagram that shows how the commands are translated and makes it easier to understand how they work.
The circle that just appeared represents our commit.
As you can see, our Head (Octocat) has appeared above our commit.
He will be standing on the latest commit we create.
Since he is standing on a commit, Git knows exactly what changes you've made and now the code displayed on the edit window is what you 
ordered Git to memorize to form this commit .
It's your turn to write another piece of code and commit your changes!
Try adding another variable in "main.cpp" edit window. (-e)
Commit your changes with the message that describes it best! (-c) 
Notice that the Head moves onto your new commit.